package common

import (
	"github.com/spf13/cobra"
)

func AddStarlarkSemanticFlags(cmd *cobra.Command) {
	cmd.Flags().Bool("enable_bzlmod", false, "If true, enables the Bzlmod dependency management system, taking precedence over WORKSPACE")
	cmd.Flags().Bool("enable_workspace", false, "If true, enables the legacy WORKSPACE system for external dependencies")
	cmd.Flags().Bool("experimental_action_resource_set", false, "If set to true, ctx.actions.run() and ctx.actions.run_shell() accept a resource_set parameter for local execution")
	cmd.Flags().Bool("experimental_bzl_visibility", false, "If enabled, adds a `visibility()` function that .bzl files may call during top-level evaluation to set their visibility for the purpose of load() statements")
	cmd.Flags().Bool("experimental_cc_shared_library", false, "If set to true, rule attributes and Starlark API methods needed for the rule cc_shared_library will be available Tags: build_file_semantics, loading_and_analysis, experimental")
	cmd.Flags().Bool("experimental_disable_external_package", false, "If set to true, the auto-generated //external package will not be available anymore")
	cmd.Flags().Bool("experimental_enable_android_migration_apis", false, "If set to true, enables the APIs required to support the Android Starlark migration")
	cmd.Flags().Bool("experimental_enable_scl_dialect", false, "If set to true, .scl files may be used in load() statements")
	cmd.Flags().Bool("experimental_google_legacy_api", false, "If set to true, exposes a number of experimental pieces of Starlark build API pertaining to Google legacy code")
	cmd.Flags().Bool("experimental_isolated_extension_usages", false, "If true, enables the <code>isolate</code> parameter in the <a href=\"https: //bazel.build/rules/lib/globals/module#use_extension\" ><code>use_extension</code></a> function")
	cmd.Flags().Bool("experimental_java_library_export", false, "If enabled, experimental_java_library_export_do_not_use module is available")
	cmd.Flags().Bool("experimental_platforms_api", false, "If set to true, enables a number of platform-related Starlark APIs useful for debugging")
	cmd.Flags().Bool("experimental_repo_remote_exec", false, "If set to true, repository_rule gains some remote execution capabilities")
	cmd.Flags().Bool("experimental_sibling_repository_layout", false, "If set to true, non-main repositories are planted as symlinks to the main repository in the execution root")
	cmd.Flags().Bool("incompatible_allow_tags_propagation", false, "If set to true, tags will be propagated from a target to the actions' execution requirements; otherwise tags are not propagated")
	cmd.Flags().Bool("incompatible_always_check_depset_elements", false, "Check the validity of elements added to depsets, in all constructors")
	cmd.Flags().Bool("incompatible_depset_for_java_output_source_jars", false, "When true, Bazel no longer returns a list from java_info.java_output[0]")
	cmd.Flags().Bool("incompatible_depset_for_libraries_to_link_getter", false, "When true, Bazel no longer returns a list from linking_context")
	cmd.Flags().Bool("incompatible_disable_objc_library_transition", false, "Disable objc_library's custom transition and inherit from the top level target instead Tags: build_file_semantics, incompatible_change")
	cmd.Flags().Bool("incompatible_disable_starlark_host_transitions", false, "If set to true, rule attributes cannot set 'cfg = \"host\"'")
	cmd.Flags().Bool("incompatible_disable_target_provider_fields", false, "If set to true, disable the ability to access providers on 'target' objects via field syntax")
	cmd.Flags().Bool("incompatible_disallow_empty_glob", false, "If set to true, the default value of the `allow_empty` argument of glob() is False")
	cmd.Flags().Bool("incompatible_disallow_struct_provider_syntax", false, "If set to true, rule implementation functions may not return a struct")
	cmd.Flags().Bool("incompatible_enable_deprecated_label_apis", false, "If enabled, certain deprecated APIs (native.repository_name, Label")
	cmd.Flags().Bool("incompatible_existing_rules_immutable_view", false, "If set to true, native.existing_rule and native.existing_rules return lightweight immutable view objects instead of mutable dicts")
	cmd.Flags().Bool("incompatible_fail_on_unknown_attributes", false, "If enabled, targets that have unknown attributes set to None fail")
	cmd.Flags().Bool("incompatible_fix_package_group_reporoot_syntax", false, "In package_group's `packages` attribute, changes the meaning of the value \"//...\" to refer to all packages in the current repository instead of all packages in any repository")
	cmd.Flags().Bool("incompatible_java_common_parameters", false, "If set to true, the output_jar, and host_javabase parameters in pack_sources and host_javabase in compile will all be removed")
	cmd.Flags().Bool("incompatible_merge_fixed_and_default_shell_env", false, "If enabled, actions registered with ctx.actions.run and ctx.actions. run_shell with both 'env' and 'use_default_shell_env = True' specified will use an environment obtained from the default shell environment by overriding with the values passed in to 'env'")
	cmd.Flags().Bool("incompatible_new_actions_api", false, "If set to true, the API to create actions is only available on `ctx")
	cmd.Flags().Bool("incompatible_no_attr_license", false, "If set to true, disables the function `attr.license`")
	cmd.Flags().Bool("incompatible_no_implicit_file_export", false, "If set, (used) source files are are package private unless exported explicitly")
	cmd.Flags().Bool("incompatible_no_rule_outputs_param", false, "If set to true, disables the `outputs` parameter of the `rule()` Starlark function")
	cmd.Flags().Bool("incompatible_objc_provider_remove_linking_info", false, "If set to true, the ObjcProvider's APIs for linking info will be removed")
	cmd.Flags().Bool("incompatible_package_group_has_public_syntax", false, "In package_group's `packages` attribute, allows writing \"public\" or \"private\" to refer to all packages or no packages respectively")
	cmd.Flags().Bool("incompatible_require_linker_input_cc_api", false, "If set to true, rule create_linking_context will require linker_inputs instead of libraries_to_link")
	cmd.Flags().Bool("incompatible_run_shell_command_string", false, "If set to true, the command parameter of actions.run_shell will only accept string Tags: build_file_semantics, incompatible_change")
	cmd.Flags().Bool("incompatible_stop_exporting_language_modules", false, "If enabled, certain language-specific modules (such as `cc_common`) are unavailable in user .bzl files and may only be called from their respective rules repositories")
	cmd.Flags().Bool("incompatible_struct_has_no_methods", false, "Disables the to_json and to_proto methods of struct, which pollute the struct field namespace")
	cmd.Flags().Bool("incompatible_top_level_aspects_require_providers", false, "If set to true, the top level aspect will honor its required providers and only run on top level targets whose rules' advertised providers satisfy the required providers of the aspect")
	cmd.Flags().Bool("incompatible_unambiguous_label_stringification", false, "When true, Bazel will stringify the label @//foo:bar to @//foo:bar, instead of //foo:bar")
	cmd.Flags().Bool("incompatible_use_cc_configure_from_rules_cc", false, "When true, Bazel will no longer allow using cc_configure from @bazel_tools")
	cmd.Flags().Bool("incompatible_use_plus_in_repo_names", false, "If true, uses the plus sign (+) as the separator in canonical repo names, instead of the tilde (~)")
	cmd.Flags().Bool("incompatible_visibility_private_attributes_at_definition", false, "If set to true, the visibility of private rule attributes is checked with respect to the rule definition, falling back to rule usage if not visible")
	cmd.Flags().String("max_computation_steps", "", "The maximum number of Starlark computation steps that may be executed by a BUILD file (zero means no limit)")
	cmd.Flags().String("nested_set_depth_limit", "", "The maximum depth of the graph internal to a depset (also known as NestedSet), above which the depset() constructor will fail")
	cmd.Flags().Bool("no-enable_bzlmod", false, "If true, enables the Bzlmod dependency management system, taking precedence over WORKSPACE")
	cmd.Flags().Bool("no-enable_workspace", false, "If true, enables the legacy WORKSPACE system for external dependencies")
	cmd.Flags().Bool("no-experimental_action_resource_set", false, "If set to true, ctx.actions.run() and ctx.actions.run_shell() accept a resource_set parameter for local execution")
	cmd.Flags().Bool("no-experimental_bzl_visibility", false, "If enabled, adds a `visibility()` function that .bzl files may call during top-level evaluation to set their visibility for the purpose of load() statements")
	cmd.Flags().Bool("no-experimental_cc_shared_library", false, "If set to true, rule attributes and Starlark API methods needed for the rule cc_shared_library will be available Tags: build_file_semantics, loading_and_analysis, experimental")
	cmd.Flags().Bool("no-experimental_disable_external_package", false, "If set to true, the auto-generated //external package will not be available anymore")
	cmd.Flags().Bool("no-experimental_enable_android_migration_apis", false, "If set to true, enables the APIs required to support the Android Starlark migration")
	cmd.Flags().Bool("no-experimental_enable_scl_dialect", false, "If set to true, .scl files may be used in load() statements")
	cmd.Flags().Bool("no-experimental_google_legacy_api", false, "If set to true, exposes a number of experimental pieces of Starlark build API pertaining to Google legacy code")
	cmd.Flags().Bool("no-experimental_isolated_extension_usages", false, "If true, enables the <code>isolate</code> parameter in the <a href=\"https: //bazel.build/rules/lib/globals/module#use_extension\" ><code>use_extension</code></a> function")
	cmd.Flags().Bool("no-experimental_java_library_export", false, "If enabled, experimental_java_library_export_do_not_use module is available")
	cmd.Flags().Bool("no-experimental_platforms_api", false, "If set to true, enables a number of platform-related Starlark APIs useful for debugging")
	cmd.Flags().Bool("no-experimental_repo_remote_exec", false, "If set to true, repository_rule gains some remote execution capabilities")
	cmd.Flags().Bool("no-experimental_sibling_repository_layout", false, "If set to true, non-main repositories are planted as symlinks to the main repository in the execution root")
	cmd.Flags().Bool("no-incompatible_allow_tags_propagation", false, "If set to true, tags will be propagated from a target to the actions' execution requirements; otherwise tags are not propagated")
	cmd.Flags().Bool("no-incompatible_always_check_depset_elements", false, "Check the validity of elements added to depsets, in all constructors")
	cmd.Flags().Bool("no-incompatible_depset_for_java_output_source_jars", false, "When true, Bazel no longer returns a list from java_info.java_output[0]")
	cmd.Flags().Bool("no-incompatible_depset_for_libraries_to_link_getter", false, "When true, Bazel no longer returns a list from linking_context")
	cmd.Flags().Bool("no-incompatible_disable_objc_library_transition", false, "Disable objc_library's custom transition and inherit from the top level target instead Tags: build_file_semantics, incompatible_change")
	cmd.Flags().Bool("no-incompatible_disable_starlark_host_transitions", false, "If set to true, rule attributes cannot set 'cfg = \"host\"'")
	cmd.Flags().Bool("no-incompatible_disable_target_provider_fields", false, "If set to true, disable the ability to access providers on 'target' objects via field syntax")
	cmd.Flags().Bool("no-incompatible_disallow_empty_glob", false, "If set to true, the default value of the `allow_empty` argument of glob() is False")
	cmd.Flags().Bool("no-incompatible_disallow_struct_provider_syntax", false, "If set to true, rule implementation functions may not return a struct")
	cmd.Flags().Bool("no-incompatible_enable_deprecated_label_apis", false, "If enabled, certain deprecated APIs (native.repository_name, Label")
	cmd.Flags().Bool("no-incompatible_existing_rules_immutable_view", false, "If set to true, native.existing_rule and native.existing_rules return lightweight immutable view objects instead of mutable dicts")
	cmd.Flags().Bool("no-incompatible_fail_on_unknown_attributes", false, "If enabled, targets that have unknown attributes set to None fail")
	cmd.Flags().Bool("no-incompatible_fix_package_group_reporoot_syntax", false, "In package_group's `packages` attribute, changes the meaning of the value \"//...\" to refer to all packages in the current repository instead of all packages in any repository")
	cmd.Flags().Bool("no-incompatible_java_common_parameters", false, "If set to true, the output_jar, and host_javabase parameters in pack_sources and host_javabase in compile will all be removed")
	cmd.Flags().Bool("no-incompatible_merge_fixed_and_default_shell_env", false, "If enabled, actions registered with ctx.actions.run and ctx.actions. run_shell with both 'env' and 'use_default_shell_env = True' specified will use an environment obtained from the default shell environment by overriding with the values passed in to 'env'")
	cmd.Flags().Bool("no-incompatible_new_actions_api", false, "If set to true, the API to create actions is only available on `ctx")
	cmd.Flags().Bool("no-incompatible_no_attr_license", false, "If set to true, disables the function `attr.license`")
	cmd.Flags().Bool("no-incompatible_no_implicit_file_export", false, "If set, (used) source files are are package private unless exported explicitly")
	cmd.Flags().Bool("no-incompatible_no_rule_outputs_param", false, "If set to true, disables the `outputs` parameter of the `rule()` Starlark function")
	cmd.Flags().Bool("no-incompatible_objc_provider_remove_linking_info", false, "If set to true, the ObjcProvider's APIs for linking info will be removed")
	cmd.Flags().Bool("no-incompatible_package_group_has_public_syntax", false, "In package_group's `packages` attribute, allows writing \"public\" or \"private\" to refer to all packages or no packages respectively")
	cmd.Flags().Bool("no-incompatible_require_linker_input_cc_api", false, "If set to true, rule create_linking_context will require linker_inputs instead of libraries_to_link")
	cmd.Flags().Bool("no-incompatible_run_shell_command_string", false, "If set to true, the command parameter of actions.run_shell will only accept string Tags: build_file_semantics, incompatible_change")
	cmd.Flags().Bool("no-incompatible_stop_exporting_language_modules", false, "If enabled, certain language-specific modules (such as `cc_common`) are unavailable in user .bzl files and may only be called from their respective rules repositories")
	cmd.Flags().Bool("no-incompatible_struct_has_no_methods", false, "Disables the to_json and to_proto methods of struct, which pollute the struct field namespace")
	cmd.Flags().Bool("no-incompatible_top_level_aspects_require_providers", false, "If set to true, the top level aspect will honor its required providers and only run on top level targets whose rules' advertised providers satisfy the required providers of the aspect")
	cmd.Flags().Bool("no-incompatible_unambiguous_label_stringification", false, "When true, Bazel will stringify the label @//foo:bar to @//foo:bar, instead of //foo:bar")
	cmd.Flags().Bool("no-incompatible_use_cc_configure_from_rules_cc", false, "When true, Bazel will no longer allow using cc_configure from @bazel_tools")
	cmd.Flags().Bool("no-incompatible_use_plus_in_repo_names", false, "If true, uses the plus sign (+) as the separator in canonical repo names, instead of the tilde (~)")
	cmd.Flags().Bool("no-incompatible_visibility_private_attributes_at_definition", false, "If set to true, the visibility of private rule attributes is checked with respect to the rule definition, falling back to rule usage if not visible")

	// TODO add flag completion
}
