package cmd

import (
	"github.com/carapace-sh/carapace"
	"github.com/spf13/cobra"
)

var podman_runCmd = &cobra.Command{
	Use:   "run",
	Short: "",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(podman_runCmd).Standalone()

	podman_runCmd.Flags().String("add-host", "", "")
	podman_runCmd.Flags().String("annotation", "", "")
	podman_runCmd.Flags().String("arch", "", "")
	podman_runCmd.Flags().String("authfile", "", "")
	podman_runCmd.Flags().String("blkio-weight", "", "")
	podman_runCmd.Flags().String("blkio-weight-device", "", "")
	podman_runCmd.Flags().String("cap-add", "", "")
	podman_runCmd.Flags().String("cap-drop", "", "")
	podman_runCmd.Flags().String("cgroup-conf", "", "")
	podman_runCmd.Flags().String("cgroup-manager", "", "")
	podman_runCmd.Flags().String("cgroup-parent", "", "")
	podman_runCmd.Flags().String("cgroupns", "", "")
	podman_runCmd.Flags().String("cgroups", "", "")
	podman_runCmd.Flags().String("chrootdirs", "", "")
	podman_runCmd.Flags().String("cidfile", "", "")
	podman_runCmd.Flags().String("config", "", "")
	podman_runCmd.Flags().String("conmon", "", "")
	podman_runCmd.Flags().String("conmon-pidfile", "", "")
	podman_runCmd.Flags().String("connection", "", "")
	podman_runCmd.Flags().String("cpu-period", "", "")
	podman_runCmd.Flags().String("cpu-quota", "", "")
	podman_runCmd.Flags().String("cpu-rt-period", "", "")
	podman_runCmd.Flags().String("cpu-rt-runtime", "", "")
	podman_runCmd.Flags().StringP("cpu-shares", "c", "", "")
	podman_runCmd.Flags().String("cpus", "", "")
	podman_runCmd.Flags().String("cpuset-cpus", "", "")
	podman_runCmd.Flags().String("cpuset-mems", "", "")
	podman_runCmd.Flags().String("decryption-key", "", "")
	podman_runCmd.Flags().BoolP("detach", "d", false, "")
	podman_runCmd.Flags().String("detach-keys", "", "")
	podman_runCmd.Flags().String("device", "", "")
	podman_runCmd.Flags().String("device-read-bps", "", "")
	podman_runCmd.Flags().String("device-read-iops", "", "")
	podman_runCmd.Flags().String("device-write-bps", "", "")
	podman_runCmd.Flags().String("device-write-iops", "", "")
	podman_runCmd.Flags().Bool("disable-content-trust", false, "")
	podman_runCmd.Flags().String("dns", "", "")
	podman_runCmd.Flags().String("dns-option", "", "")
	podman_runCmd.Flags().String("dns-search", "", "")
	podman_runCmd.Flags().StringP("env", "e", "", "")
	podman_runCmd.Flags().String("env-file", "", "")
	podman_runCmd.Flags().Bool("env-host", false, "")
	podman_runCmd.Flags().String("env-merge", "", "")
	podman_runCmd.Flags().String("events-backend", "", "")
	podman_runCmd.Flags().String("expose", "", "")
	podman_runCmd.Flags().String("gidmap", "", "")
	podman_runCmd.Flags().String("gpus", "", "")
	podman_runCmd.Flags().String("group-add", "", "")
	podman_runCmd.Flags().String("group-entry", "", "")
	podman_runCmd.Flags().String("health-cmd", "", "")
	podman_runCmd.Flags().String("health-interval", "", "")
	podman_runCmd.Flags().String("health-on-failure", "", "")
	podman_runCmd.Flags().String("health-retries", "", "")
	podman_runCmd.Flags().String("health-start-period", "", "")
	podman_runCmd.Flags().String("health-startup-cmd", "", "")
	podman_runCmd.Flags().String("health-startup-interval", "", "")
	podman_runCmd.Flags().String("health-startup-retries", "", "")
	podman_runCmd.Flags().String("health-startup-success", "", "")
	podman_runCmd.Flags().String("health-startup-timeout", "", "")
	podman_runCmd.Flags().String("health-timeout", "", "")
	podman_runCmd.Flags().String("hooks-dir", "", "")
	podman_runCmd.Flags().String("hostname", "", "")
	podman_runCmd.Flags().String("hostuser", "", "")
	podman_runCmd.Flags().String("http-proxy", "", "")
	podman_runCmd.Flags().String("identity", "", "")
	podman_runCmd.Flags().String("imagestore", "", "")
	podman_runCmd.Flags().Bool("init", false, "")
	podman_runCmd.Flags().String("init-path", "", "")
	podman_runCmd.Flags().BoolP("interactive", "i", false, "")
	podman_runCmd.Flags().String("ip", "", "")
	podman_runCmd.Flags().String("ip6", "", "")
	podman_runCmd.Flags().String("ipc", "", "")
	podman_runCmd.Flags().StringP("label", "l", "", "")
	podman_runCmd.Flags().String("label-file", "", "")
	podman_runCmd.Flags().String("link-local-ip", "", "")
	podman_runCmd.Flags().String("log-driver", "", "")
	podman_runCmd.Flags().String("log-level", "", "")
	podman_runCmd.Flags().String("log-opt", "", "")
	podman_runCmd.Flags().String("mac-address", "", "")
	podman_runCmd.Flags().StringP("memory", "m", "", "")
	podman_runCmd.Flags().String("memory-reservation", "", "")
	podman_runCmd.Flags().String("memory-swap", "", "")
	podman_runCmd.Flags().String("memory-swappiness", "", "")
	podman_runCmd.Flags().String("module", "", "")
	podman_runCmd.Flags().String("mount", "", "")
	podman_runCmd.Flags().String("name", "", "")
	podman_runCmd.Flags().String("network", "", "")
	podman_runCmd.Flags().String("network-alias", "", "")
	podman_runCmd.Flags().String("network-cmd-path", "", "")
	podman_runCmd.Flags().String("network-config-dir", "", "")
	podman_runCmd.Flags().Bool("no-healthcheck", false, "")
	podman_runCmd.Flags().Bool("no-hosts", false, "")
	podman_runCmd.Flags().Bool("oom-kill-disable", false, "")
	podman_runCmd.Flags().String("oom-score-adj", "", "")
	podman_runCmd.Flags().String("os", "", "")
	podman_runCmd.Flags().String("out", "", "")
	podman_runCmd.Flags().Bool("passwd", false, "")
	podman_runCmd.Flags().String("passwd-entry", "", "")
	podman_runCmd.Flags().String("personality", "", "")
	podman_runCmd.Flags().String("pid", "", "")
	podman_runCmd.Flags().String("pidfile", "", "")
	podman_runCmd.Flags().String("pids-limit", "", "")
	podman_runCmd.Flags().String("platform", "", "")
	podman_runCmd.Flags().String("pod", "", "")
	podman_runCmd.Flags().String("pod-id-file", "", "")
	podman_runCmd.Flags().String("preserve-fd", "", "")
	podman_runCmd.Flags().String("preserve-fds", "", "")
	podman_runCmd.Flags().Bool("privileged", false, "")
	podman_runCmd.Flags().StringP("publish", "p", "", "")
	podman_runCmd.Flags().BoolP("publish-all", "P", false, "")
	podman_runCmd.Flags().String("pull", "", "")
	podman_runCmd.Flags().BoolP("quiet", "q", false, "")
	podman_runCmd.Flags().Bool("read-only", false, "")
	podman_runCmd.Flags().String("read-only-tmpfs", "", "")
	podman_runCmd.Flags().StringP("remote", "r", "", "")
	podman_runCmd.Flags().Bool("replace", false, "")
	podman_runCmd.Flags().String("requires", "", "")
	podman_runCmd.Flags().String("restart", "", "")
	podman_runCmd.Flags().String("retry", "", "")
	podman_runCmd.Flags().String("retry-delay", "", "")
	podman_runCmd.Flags().Bool("rm", false, "")
	podman_runCmd.Flags().Bool("rmi", false, "")
	podman_runCmd.Flags().String("root", "", "")
	podman_runCmd.Flags().String("rootfs", "", "")
	podman_runCmd.Flags().String("runroot", "", "")
	podman_runCmd.Flags().String("runtime", "", "")
	podman_runCmd.Flags().String("runtime-flag", "", "")
	podman_runCmd.Flags().String("sdnotify", "", "")
	podman_runCmd.Flags().String("seccomp-policy", "", "")
	podman_runCmd.Flags().String("secret", "", "")
	podman_runCmd.Flags().String("security-opt", "", "")
	podman_runCmd.Flags().String("shm-size", "", "")
	podman_runCmd.Flags().String("shm-size-systemd", "", "")
	podman_runCmd.Flags().String("sig-proxy", "", "")
	podman_runCmd.Flags().String("ssh", "", "")
	podman_runCmd.Flags().String("stop-signal", "", "")
	podman_runCmd.Flags().String("stop-timeout", "", "")
	podman_runCmd.Flags().String("storage-driver", "", "")
	podman_runCmd.Flags().String("storage-opt", "", "")
	podman_runCmd.Flags().String("subgidname", "", "")
	podman_runCmd.Flags().String("subuidname", "", "")
	podman_runCmd.Flags().String("sysctl", "", "")
	podman_runCmd.Flags().Bool("syslog", false, "")
	podman_runCmd.Flags().String("timeout", "", "")
	podman_runCmd.Flags().String("tls-verify", "", "")
	podman_runCmd.Flags().String("tmpdir", "", "")
	podman_runCmd.Flags().String("tmpfs", "", "")
	podman_runCmd.Flags().String("transient-store", "", "")
	podman_runCmd.Flags().BoolP("tty", "t", false, "")
	podman_runCmd.Flags().String("tz", "", "")
	podman_runCmd.Flags().String("uidmap", "", "")
	podman_runCmd.Flags().String("ulimit", "", "")
	podman_runCmd.Flags().String("umask", "", "")
	podman_runCmd.Flags().String("url", "", "")
	podman_runCmd.Flags().StringP("user", "u", "", "")
	podman_runCmd.Flags().String("userns", "", "")
	podman_runCmd.Flags().String("uts", "", "")
	podman_runCmd.Flags().String("variant", "", "")
	podman_runCmd.Flags().StringP("volume", "v", "", "")
	podman_runCmd.Flags().String("volumepath", "", "")
	podman_runCmd.Flags().String("volumes-from", "", "")
	podman_runCmd.Flags().StringP("workdir", "w", "", "")
	podmanCmd.AddCommand(podman_runCmd)
}
